/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIOneinchApi
{
public:
	OpenAPIOneinchApi();
	~OpenAPIOneinchApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ApproveCallDataRequest;
	class ApproveCallDataResponse;
	class ApproveSpenderRequest;
	class ApproveSpenderResponse;
	class ProtocolsRequest;
	class ProtocolsResponse;
	class QuoteRequest;
	class QuoteResponse;
	class SwapRequest;
	class SwapResponse;
	class TokensRequest;
	class TokensResponse;
	
    DECLARE_DELEGATE_OneParam(FApproveCallDataDelegate, const ApproveCallDataResponse&);
    DECLARE_DELEGATE_OneParam(FApproveSpenderDelegate, const ApproveSpenderResponse&);
    DECLARE_DELEGATE_OneParam(FProtocolsDelegate, const ProtocolsResponse&);
    DECLARE_DELEGATE_OneParam(FQuoteDelegate, const QuoteResponse&);
    DECLARE_DELEGATE_OneParam(FSwapDelegate, const SwapResponse&);
    DECLARE_DELEGATE_OneParam(FTokensDelegate, const TokensResponse&);
    
    FHttpRequestPtr ApproveCallData(const ApproveCallDataRequest& Request, const FApproveCallDataDelegate& Delegate = FApproveCallDataDelegate()) const;
    FHttpRequestPtr ApproveSpender(const ApproveSpenderRequest& Request, const FApproveSpenderDelegate& Delegate = FApproveSpenderDelegate()) const;
    FHttpRequestPtr Protocols(const ProtocolsRequest& Request, const FProtocolsDelegate& Delegate = FProtocolsDelegate()) const;
    FHttpRequestPtr Quote(const QuoteRequest& Request, const FQuoteDelegate& Delegate = FQuoteDelegate()) const;
    FHttpRequestPtr Swap(const SwapRequest& Request, const FSwapDelegate& Delegate = FSwapDelegate()) const;
    FHttpRequestPtr Tokens(const TokensRequest& Request, const FTokensDelegate& Delegate = FTokensDelegate()) const;
    
private:
    void OnApproveCallDataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApproveCallDataDelegate Delegate) const;
    void OnApproveSpenderResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApproveSpenderDelegate Delegate) const;
    void OnProtocolsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProtocolsDelegate Delegate) const;
    void OnQuoteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FQuoteDelegate Delegate) const;
    void OnSwapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSwapDelegate Delegate) const;
    void OnTokensResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTokensDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
