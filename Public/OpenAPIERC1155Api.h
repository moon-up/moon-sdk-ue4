/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIERC1155Api
{
public:
	OpenAPIERC1155Api();
	~OpenAPIERC1155Api();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class BalanceOfRequest;
	class BalanceOfResponse;
	class BalanceOfBatchRequest;
	class BalanceOfBatchResponse;
	class IsApprovedForAllRequest;
	class IsApprovedForAllResponse;
	class SafeBatchTransferFromRequest;
	class SafeBatchTransferFromResponse;
	class SafeTransferFromRequest;
	class SafeTransferFromResponse;
	class SetApprovalForAllRequest;
	class SetApprovalForAllResponse;
	
    DECLARE_DELEGATE_OneParam(FBalanceOfDelegate, const BalanceOfResponse&);
    DECLARE_DELEGATE_OneParam(FBalanceOfBatchDelegate, const BalanceOfBatchResponse&);
    DECLARE_DELEGATE_OneParam(FIsApprovedForAllDelegate, const IsApprovedForAllResponse&);
    DECLARE_DELEGATE_OneParam(FSafeBatchTransferFromDelegate, const SafeBatchTransferFromResponse&);
    DECLARE_DELEGATE_OneParam(FSafeTransferFromDelegate, const SafeTransferFromResponse&);
    DECLARE_DELEGATE_OneParam(FSetApprovalForAllDelegate, const SetApprovalForAllResponse&);
    
    FHttpRequestPtr BalanceOf(const BalanceOfRequest& Request, const FBalanceOfDelegate& Delegate = FBalanceOfDelegate()) const;
    FHttpRequestPtr BalanceOfBatch(const BalanceOfBatchRequest& Request, const FBalanceOfBatchDelegate& Delegate = FBalanceOfBatchDelegate()) const;
    FHttpRequestPtr IsApprovedForAll(const IsApprovedForAllRequest& Request, const FIsApprovedForAllDelegate& Delegate = FIsApprovedForAllDelegate()) const;
    FHttpRequestPtr SafeBatchTransferFrom(const SafeBatchTransferFromRequest& Request, const FSafeBatchTransferFromDelegate& Delegate = FSafeBatchTransferFromDelegate()) const;
    FHttpRequestPtr SafeTransferFrom(const SafeTransferFromRequest& Request, const FSafeTransferFromDelegate& Delegate = FSafeTransferFromDelegate()) const;
    FHttpRequestPtr SetApprovalForAll(const SetApprovalForAllRequest& Request, const FSetApprovalForAllDelegate& Delegate = FSetApprovalForAllDelegate()) const;
    
private:
    void OnBalanceOfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBalanceOfDelegate Delegate) const;
    void OnBalanceOfBatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBalanceOfBatchDelegate Delegate) const;
    void OnIsApprovedForAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsApprovedForAllDelegate Delegate) const;
    void OnSafeBatchTransferFromResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSafeBatchTransferFromDelegate Delegate) const;
    void OnSafeTransferFromResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSafeTransferFromDelegate Delegate) const;
    void OnSetApprovalForAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetApprovalForAllDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
