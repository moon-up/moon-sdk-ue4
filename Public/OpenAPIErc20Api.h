/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace MoonSDK
{

class MOONSDK_API OpenAPIErc20Api
{
public:
	OpenAPIErc20Api();
	~OpenAPIErc20Api();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AllowanceErc20Request;
	class AllowanceErc20Response;
	class ApproveErc20Request;
	class ApproveErc20Response;
	class BalanceOfErc20Request;
	class BalanceOfErc20Response;
	class DecimalsErc20Request;
	class DecimalsErc20Response;
	class NameErc20Request;
	class NameErc20Response;
	class SymbolErc20Request;
	class SymbolErc20Response;
	class TotalSupplyErc20Request;
	class TotalSupplyErc20Response;
	class TransferErc20Request;
	class TransferErc20Response;
	class TransferFromErc20Request;
	class TransferFromErc20Response;
	
    DECLARE_DELEGATE_OneParam(FAllowanceErc20Delegate, const AllowanceErc20Response&);
    DECLARE_DELEGATE_OneParam(FApproveErc20Delegate, const ApproveErc20Response&);
    DECLARE_DELEGATE_OneParam(FBalanceOfErc20Delegate, const BalanceOfErc20Response&);
    DECLARE_DELEGATE_OneParam(FDecimalsErc20Delegate, const DecimalsErc20Response&);
    DECLARE_DELEGATE_OneParam(FNameErc20Delegate, const NameErc20Response&);
    DECLARE_DELEGATE_OneParam(FSymbolErc20Delegate, const SymbolErc20Response&);
    DECLARE_DELEGATE_OneParam(FTotalSupplyErc20Delegate, const TotalSupplyErc20Response&);
    DECLARE_DELEGATE_OneParam(FTransferErc20Delegate, const TransferErc20Response&);
    DECLARE_DELEGATE_OneParam(FTransferFromErc20Delegate, const TransferFromErc20Response&);
    
    FHttpRequestPtr AllowanceErc20(const AllowanceErc20Request& Request, const FAllowanceErc20Delegate& Delegate = FAllowanceErc20Delegate()) const;
    FHttpRequestPtr ApproveErc20(const ApproveErc20Request& Request, const FApproveErc20Delegate& Delegate = FApproveErc20Delegate()) const;
    FHttpRequestPtr BalanceOfErc20(const BalanceOfErc20Request& Request, const FBalanceOfErc20Delegate& Delegate = FBalanceOfErc20Delegate()) const;
    FHttpRequestPtr DecimalsErc20(const DecimalsErc20Request& Request, const FDecimalsErc20Delegate& Delegate = FDecimalsErc20Delegate()) const;
    FHttpRequestPtr NameErc20(const NameErc20Request& Request, const FNameErc20Delegate& Delegate = FNameErc20Delegate()) const;
    FHttpRequestPtr SymbolErc20(const SymbolErc20Request& Request, const FSymbolErc20Delegate& Delegate = FSymbolErc20Delegate()) const;
    FHttpRequestPtr TotalSupplyErc20(const TotalSupplyErc20Request& Request, const FTotalSupplyErc20Delegate& Delegate = FTotalSupplyErc20Delegate()) const;
    FHttpRequestPtr TransferErc20(const TransferErc20Request& Request, const FTransferErc20Delegate& Delegate = FTransferErc20Delegate()) const;
    FHttpRequestPtr TransferFromErc20(const TransferFromErc20Request& Request, const FTransferFromErc20Delegate& Delegate = FTransferFromErc20Delegate()) const;
    
private:
    void OnAllowanceErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAllowanceErc20Delegate Delegate) const;
    void OnApproveErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApproveErc20Delegate Delegate) const;
    void OnBalanceOfErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBalanceOfErc20Delegate Delegate) const;
    void OnDecimalsErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDecimalsErc20Delegate Delegate) const;
    void OnNameErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNameErc20Delegate Delegate) const;
    void OnSymbolErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSymbolErc20Delegate Delegate) const;
    void OnTotalSupplyErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTotalSupplyErc20Delegate Delegate) const;
    void OnTransferErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferErc20Delegate Delegate) const;
    void OnTransferFromErc20Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferFromErc20Delegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
