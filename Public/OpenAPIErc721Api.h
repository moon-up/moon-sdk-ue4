/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace MoonSDK
{

class MOONSDK_API OpenAPIErc721Api
{
public:
	OpenAPIErc721Api();
	~OpenAPIErc721Api();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ApproveRequest;
	class ApproveResponse;
	class BalanceOfRequest;
	class BalanceOfResponse;
	class GetApprovedRequest;
	class GetApprovedResponse;
	class IsApprovedForAllRequest;
	class IsApprovedForAllResponse;
	class NameRequest;
	class NameResponse;
	class OwnerOfRequest;
	class OwnerOfResponse;
	class SafeTransferFromRequest;
	class SafeTransferFromResponse;
	class SetApprovalForAllRequest;
	class SetApprovalForAllResponse;
	class SymbolRequest;
	class SymbolResponse;
	class TokenUriRequest;
	class TokenUriResponse;
	class TransferRequest;
	class TransferResponse;
	class TransferFromRequest;
	class TransferFromResponse;
	
    DECLARE_DELEGATE_OneParam(FApproveDelegate, const ApproveResponse&);
    DECLARE_DELEGATE_OneParam(FBalanceOfDelegate, const BalanceOfResponse&);
    DECLARE_DELEGATE_OneParam(FGetApprovedDelegate, const GetApprovedResponse&);
    DECLARE_DELEGATE_OneParam(FIsApprovedForAllDelegate, const IsApprovedForAllResponse&);
    DECLARE_DELEGATE_OneParam(FNameDelegate, const NameResponse&);
    DECLARE_DELEGATE_OneParam(FOwnerOfDelegate, const OwnerOfResponse&);
    DECLARE_DELEGATE_OneParam(FSafeTransferFromDelegate, const SafeTransferFromResponse&);
    DECLARE_DELEGATE_OneParam(FSetApprovalForAllDelegate, const SetApprovalForAllResponse&);
    DECLARE_DELEGATE_OneParam(FSymbolDelegate, const SymbolResponse&);
    DECLARE_DELEGATE_OneParam(FTokenUriDelegate, const TokenUriResponse&);
    DECLARE_DELEGATE_OneParam(FTransferDelegate, const TransferResponse&);
    DECLARE_DELEGATE_OneParam(FTransferFromDelegate, const TransferFromResponse&);
    
    FHttpRequestPtr Approve(const ApproveRequest& Request, const FApproveDelegate& Delegate = FApproveDelegate()) const;
    FHttpRequestPtr BalanceOf(const BalanceOfRequest& Request, const FBalanceOfDelegate& Delegate = FBalanceOfDelegate()) const;
    FHttpRequestPtr GetApproved(const GetApprovedRequest& Request, const FGetApprovedDelegate& Delegate = FGetApprovedDelegate()) const;
    FHttpRequestPtr IsApprovedForAll(const IsApprovedForAllRequest& Request, const FIsApprovedForAllDelegate& Delegate = FIsApprovedForAllDelegate()) const;
    FHttpRequestPtr Name(const NameRequest& Request, const FNameDelegate& Delegate = FNameDelegate()) const;
    FHttpRequestPtr OwnerOf(const OwnerOfRequest& Request, const FOwnerOfDelegate& Delegate = FOwnerOfDelegate()) const;
    FHttpRequestPtr SafeTransferFrom(const SafeTransferFromRequest& Request, const FSafeTransferFromDelegate& Delegate = FSafeTransferFromDelegate()) const;
    FHttpRequestPtr SetApprovalForAll(const SetApprovalForAllRequest& Request, const FSetApprovalForAllDelegate& Delegate = FSetApprovalForAllDelegate()) const;
    FHttpRequestPtr Symbol(const SymbolRequest& Request, const FSymbolDelegate& Delegate = FSymbolDelegate()) const;
    FHttpRequestPtr TokenUri(const TokenUriRequest& Request, const FTokenUriDelegate& Delegate = FTokenUriDelegate()) const;
    FHttpRequestPtr Transfer(const TransferRequest& Request, const FTransferDelegate& Delegate = FTransferDelegate()) const;
    FHttpRequestPtr TransferFrom(const TransferFromRequest& Request, const FTransferFromDelegate& Delegate = FTransferFromDelegate()) const;
    
private:
    void OnApproveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApproveDelegate Delegate) const;
    void OnBalanceOfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBalanceOfDelegate Delegate) const;
    void OnGetApprovedResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetApprovedDelegate Delegate) const;
    void OnIsApprovedForAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsApprovedForAllDelegate Delegate) const;
    void OnNameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNameDelegate Delegate) const;
    void OnOwnerOfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOwnerOfDelegate Delegate) const;
    void OnSafeTransferFromResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSafeTransferFromDelegate Delegate) const;
    void OnSetApprovalForAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetApprovalForAllDelegate Delegate) const;
    void OnSymbolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSymbolDelegate Delegate) const;
    void OnTokenUriResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTokenUriDelegate Delegate) const;
    void OnTransferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferDelegate Delegate) const;
    void OnTransferFromResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferFromDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
