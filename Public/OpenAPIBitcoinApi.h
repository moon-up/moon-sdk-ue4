/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBitcoinApi
{
public:
	OpenAPIBitcoinApi();
	~OpenAPIBitcoinApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateBitcoinAccountRequest;
	class CreateBitcoinAccountResponse;
	class GetBitcoinAccountRequest;
	class GetBitcoinAccountResponse;
	class ListBitcoinAccountsRequest;
	class ListBitcoinAccountsResponse;
	class SignBitcoinTransactionRequest;
	class SignBitcoinTransactionResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateBitcoinAccountDelegate, const CreateBitcoinAccountResponse&);
    DECLARE_DELEGATE_OneParam(FGetBitcoinAccountDelegate, const GetBitcoinAccountResponse&);
    DECLARE_DELEGATE_OneParam(FListBitcoinAccountsDelegate, const ListBitcoinAccountsResponse&);
    DECLARE_DELEGATE_OneParam(FSignBitcoinTransactionDelegate, const SignBitcoinTransactionResponse&);
    
    FHttpRequestPtr CreateBitcoinAccount(const CreateBitcoinAccountRequest& Request, const FCreateBitcoinAccountDelegate& Delegate = FCreateBitcoinAccountDelegate()) const;
    FHttpRequestPtr GetBitcoinAccount(const GetBitcoinAccountRequest& Request, const FGetBitcoinAccountDelegate& Delegate = FGetBitcoinAccountDelegate()) const;
    FHttpRequestPtr ListBitcoinAccounts(const ListBitcoinAccountsRequest& Request, const FListBitcoinAccountsDelegate& Delegate = FListBitcoinAccountsDelegate()) const;
    FHttpRequestPtr SignBitcoinTransaction(const SignBitcoinTransactionRequest& Request, const FSignBitcoinTransactionDelegate& Delegate = FSignBitcoinTransactionDelegate()) const;
    
private:
    void OnCreateBitcoinAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateBitcoinAccountDelegate Delegate) const;
    void OnGetBitcoinAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBitcoinAccountDelegate Delegate) const;
    void OnListBitcoinAccountsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListBitcoinAccountsDelegate Delegate) const;
    void OnSignBitcoinTransactionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSignBitcoinTransactionDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
