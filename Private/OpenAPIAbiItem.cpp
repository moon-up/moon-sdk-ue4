/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAbiItem.h"

#include "MoonSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MoonSDK
{

void OpenAPIAbiItem::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Anonymous.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("anonymous")); WriteJsonValue(Writer, Anonymous.GetValue());
	}
	if (Constant.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("constant")); WriteJsonValue(Writer, Constant.GetValue());
	}
	if (Inputs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputs")); WriteJsonValue(Writer, Inputs.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Outputs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputs")); WriteJsonValue(Writer, Outputs.GetValue());
	}
	if (Payable.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("payable")); WriteJsonValue(Writer, Payable.GetValue());
	}
	if (StateMutability.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stateMutability")); WriteJsonValue(Writer, StateMutability.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	if (Gas.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gas")); WriteJsonValue(Writer, Gas.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAbiItem::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("anonymous"), Anonymous);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("constant"), Constant);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputs"), Inputs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputs"), Outputs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("payable"), Payable);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stateMutability"), StateMutability);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gas"), Gas);

	return ParseSuccess;
}

}
