/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGetSwapDto.h"

#include "MoonSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MoonSDK
{

void OpenAPIGetSwapDto::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("src")); WriteJsonValue(Writer, Src);
	Writer->WriteIdentifierPrefix(TEXT("dst")); WriteJsonValue(Writer, Dst);
	Writer->WriteIdentifierPrefix(TEXT("amount")); WriteJsonValue(Writer, Amount);
	Writer->WriteIdentifierPrefix(TEXT("from")); WriteJsonValue(Writer, From);
	Writer->WriteIdentifierPrefix(TEXT("slippage")); WriteJsonValue(Writer, Slippage);
	if (Protocols.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("protocols")); WriteJsonValue(Writer, Protocols.GetValue());
	}
	if (Fee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fee")); WriteJsonValue(Writer, Fee.GetValue());
	}
	if (DisableEstimate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("disableEstimate")); WriteJsonValue(Writer, DisableEstimate.GetValue());
	}
	if (Permit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("permit")); WriteJsonValue(Writer, Permit.GetValue());
	}
	if (IncludeTokensInfo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("includeTokensInfo")); WriteJsonValue(Writer, IncludeTokensInfo.GetValue());
	}
	if (IncludeProtocols.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("includeProtocols")); WriteJsonValue(Writer, IncludeProtocols.GetValue());
	}
	if (Compatibility.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("compatibility")); WriteJsonValue(Writer, Compatibility.GetValue());
	}
	if (AllowPartialFill.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("allowPartialFill")); WriteJsonValue(Writer, AllowPartialFill.GetValue());
	}
	if (Parts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("parts")); WriteJsonValue(Writer, Parts.GetValue());
	}
	if (MainRouteParts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("mainRouteParts")); WriteJsonValue(Writer, MainRouteParts.GetValue());
	}
	if (ConnectorTokens.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connectorTokens")); WriteJsonValue(Writer, ConnectorTokens.GetValue());
	}
	if (ComplexityLevel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("complexityLevel")); WriteJsonValue(Writer, ComplexityLevel.GetValue());
	}
	if (GasLimit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gasLimit")); WriteJsonValue(Writer, GasLimit.GetValue());
	}
	if (GasPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gasPrice")); WriteJsonValue(Writer, GasPrice.GetValue());
	}
	if (Referrer.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("referrer")); WriteJsonValue(Writer, Referrer.GetValue());
	}
	if (Receiver.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("receiver")); WriteJsonValue(Writer, Receiver.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chainId")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGetSwapDto::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("src"), Src);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dst"), Dst);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("amount"), Amount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("from"), From);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("slippage"), Slippage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("protocols"), Protocols);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fee"), Fee);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("disableEstimate"), DisableEstimate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("permit"), Permit);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("includeTokensInfo"), IncludeTokensInfo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("includeProtocols"), IncludeProtocols);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("compatibility"), Compatibility);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("allowPartialFill"), AllowPartialFill);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parts"), Parts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mainRouteParts"), MainRouteParts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connectorTokens"), ConnectorTokens);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("complexityLevel"), ComplexityLevel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gasLimit"), GasLimit);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gasPrice"), GasPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("referrer"), Referrer);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("receiver"), Receiver);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chainId"), ChainId);

	return ParseSuccess;
}

}
