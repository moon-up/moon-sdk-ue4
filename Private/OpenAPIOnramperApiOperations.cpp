/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOnramperApiOperations.h"

#include "MoonSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace MoonSDK
{

FString OpenAPIOnramperApi::OnRamperCheckoutRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("accountName"), FStringFormatArg(ToUrlString(AccountName)) } };

	FString Path = FString::Format(TEXT("/onramper/fund/${accountName}"), PathParams);

	return Path;
}

void OpenAPIOnramperApi::OnRamperCheckoutRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPITransactionInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogMoonSDK, Error, TEXT("Body parameter (OpenAPITransactionInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogMoonSDK, Error, TEXT("Body parameter (OpenAPITransactionInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogMoonSDK, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOnramperApi::OnRamperCheckoutResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperCheckoutResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetQuotesBuyRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/quotes/buy"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("fiat=")) + ToUrlString(Fiat));
	QueryParams.Add(FString(TEXT("crypto=")) + ToUrlString(Crypto));
	QueryParams.Add(FString(TEXT("amount=")) + ToUrlString(Amount));
	if(PaymentMethod.IsSet())
	{
		QueryParams.Add(FString(TEXT("paymentMethod=")) + ToUrlString(PaymentMethod.GetValue()));
	}
	if(Uuid.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuid=")) + ToUrlString(Uuid.GetValue()));
	}
	if(ClientName.IsSet())
	{
		QueryParams.Add(FString(TEXT("clientName=")) + ToUrlString(ClientName.GetValue()));
	}
	if(Country.IsSet())
	{
		QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetQuotesBuyRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetQuotesBuyResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetQuotesBuyResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetQuotesSellRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/quotes/sell"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("fiat=")) + ToUrlString(Fiat));
	QueryParams.Add(FString(TEXT("crypto=")) + ToUrlString(Crypto));
	QueryParams.Add(FString(TEXT("amount=")) + ToUrlString(Amount));
	if(PaymentMethod.IsSet())
	{
		QueryParams.Add(FString(TEXT("paymentMethod=")) + ToUrlString(PaymentMethod.GetValue()));
	}
	if(Uuid.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuid=")) + ToUrlString(Uuid.GetValue()));
	}
	if(ClientName.IsSet())
	{
		QueryParams.Add(FString(TEXT("clientName=")) + ToUrlString(ClientName.GetValue()));
	}
	if(Country.IsSet())
	{
		QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetQuotesSellRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetQuotesSellResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetQuotesSellResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedAssetsRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/assets"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("source=")) + ToUrlString(Source));
	QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedAssetsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedAssetsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedAssetsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedCurrenciesRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/currencies"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("type=")) + ToUrlString(Type));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedCurrenciesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedCurrenciesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedCurrenciesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedDefaultsAllRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/defaults"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country));
	QueryParams.Add(FString(TEXT("type=")) + ToUrlString(Type));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedDefaultsAllRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedDefaultsAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedDefaultsAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedOnRampsAllRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/onramps"));
	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedOnRampsAllRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedOnRampsAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedOnRampsAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/payment-types"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("fiat=")) + ToUrlString(Fiat));
	QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country));
	QueryParams.Add(FString(TEXT("type=")) + ToUrlString(Type));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesFiatRequest::ComputePath() const
{
	FString Path(TEXT("/onramper/payment-types/fiat"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("fiat=")) + ToUrlString(Fiat));
	QueryParams.Add(FString(TEXT("country=")) + ToUrlString(Country));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesFiatRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Authorization"), Authorization);

}

void OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesFiatResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Ok"));
		break;
	}
}

bool OpenAPIOnramperApi::OnRamperGetSupportedPaymentTypesFiatResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
