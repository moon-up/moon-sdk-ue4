/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPaymentIntentResponse.h"

#include "MoonSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MoonSDK
{

void OpenAPIPaymentIntentResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Metadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata")); WriteJsonValue(Writer, Metadata.GetValue());
	}
	if (Uri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uri")); WriteJsonValue(Writer, Uri.GetValue());
	}
	if (QrCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("qr_code")); WriteJsonValue(Writer, QrCode.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Destination.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("destination")); WriteJsonValue(Writer, Destination.GetValue());
	}
	if (Amount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("amount")); WriteJsonValue(Writer, Amount.GetValue());
	}
	if (Network.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("network")); WriteJsonValue(Writer, Network.GetValue());
	}
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (Message.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("message")); WriteJsonValue(Writer, Message.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("success")); WriteJsonValue(Writer, Success);
	Writer->WriteObjectEnd();
}

bool OpenAPIPaymentIntentResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata"), Metadata);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("uri"), Uri);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("qr_code"), QrCode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("destination"), Destination);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("amount"), Amount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("network"), Network);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("message"), Message);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("success"), Success);

	return ParseSuccess;
}

}
