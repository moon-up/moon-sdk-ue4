/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIIERC20Transfer.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIIERC20Transfer::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("transactionHash")); WriteJsonValue(Writer, TransactionHash);
	Writer->WriteIdentifierPrefix(TEXT("contract")); WriteJsonValue(Writer, Contract);
	Writer->WriteIdentifierPrefix(TEXT("logIndex")); WriteJsonValue(Writer, LogIndex);
	Writer->WriteIdentifierPrefix(TEXT("from")); WriteJsonValue(Writer, From);
	Writer->WriteIdentifierPrefix(TEXT("to")); WriteJsonValue(Writer, To);
	Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value);
	Writer->WriteIdentifierPrefix(TEXT("tokenDecimals")); WriteJsonValue(Writer, TokenDecimals);
	Writer->WriteIdentifierPrefix(TEXT("tokenName")); WriteJsonValue(Writer, TokenName);
	Writer->WriteIdentifierPrefix(TEXT("tokenSymbol")); WriteJsonValue(Writer, TokenSymbol);
	if (ValueWithDecimals.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("valueWithDecimals")); WriteJsonValue(Writer, ValueWithDecimals.GetValue());
	}
	if (Triggers.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("triggers")); WriteJsonValue(Writer, Triggers.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIIERC20Transfer::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transactionHash"), TransactionHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract"), Contract);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("logIndex"), LogIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("from"), From);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("to"), To);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tokenDecimals"), TokenDecimals);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tokenName"), TokenName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tokenSymbol"), TokenSymbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("valueWithDecimals"), ValueWithDecimals);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("triggers"), Triggers);

	return ParseSuccess;
}

}
