/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITransaction.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPITransaction::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (MoonScanUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("moon_scan_url")); WriteJsonValue(Writer, MoonScanUrl.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("transaction_hash")); WriteJsonValue(Writer, TransactionHash);
	Writer->WriteIdentifierPrefix(TEXT("signed_transaction")); WriteJsonValue(Writer, SignedTransaction);
	if (SignedMessage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signed_message")); WriteJsonValue(Writer, SignedMessage.GetValue());
	}
	if (RawTransaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("raw_transaction")); WriteJsonValue(Writer, RawTransaction.GetValue());
	}
	if (Signature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature.GetValue());
	}
	if (Transaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction")); WriteJsonValue(Writer, Transaction.GetValue());
	}
	if (UserOps.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userOps")); WriteJsonValue(Writer, UserOps.GetValue());
	}
	if (UseropTransaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userop_transaction")); WriteJsonValue(Writer, UseropTransaction.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPITransaction::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("moon_scan_url"), MoonScanUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction_hash"), TransactionHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signed_transaction"), SignedTransaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signed_message"), SignedMessage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("raw_transaction"), RawTransaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction"), Transaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userOps"), UserOps);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userop_transaction"), UseropTransaction);

	return ParseSuccess;
}

}
