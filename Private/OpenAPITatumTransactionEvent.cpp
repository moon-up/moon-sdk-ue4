/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITatumTransactionEvent.h"

#include "MoonSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MoonSDK
{

void OpenAPITatumTransactionEvent::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("amount")); WriteJsonValue(Writer, Amount);
	Writer->WriteIdentifierPrefix(TEXT("test")); WriteJsonValue(Writer, Test);
	Writer->WriteIdentifierPrefix(TEXT("counterAddress")); WriteJsonValue(Writer, CounterAddress);
	Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address);
	Writer->WriteIdentifierPrefix(TEXT("mempool")); WriteJsonValue(Writer, Mempool);
	Writer->WriteIdentifierPrefix(TEXT("subscriptionType")); WriteJsonValue(Writer, SubscriptionType);
	Writer->WriteIdentifierPrefix(TEXT("blockNumber")); WriteJsonValue(Writer, BlockNumber);
	Writer->WriteIdentifierPrefix(TEXT("txId")); WriteJsonValue(Writer, TxId);
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency);
	Writer->WriteObjectEnd();
}

bool OpenAPITatumTransactionEvent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("amount"), Amount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("test"), Test);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("counterAddress"), CounterAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mempool"), Mempool);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subscriptionType"), SubscriptionType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blockNumber"), BlockNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("txId"), TxId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);

	return ParseSuccess;
}

}
