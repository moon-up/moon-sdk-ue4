/**
 * moon-vault-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAccountControllerResponseData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIAccountControllerResponseData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("nonce")); WriteJsonValue(Writer, Nonce);
	Writer->WriteIdentifierPrefix(TEXT("balance")); WriteJsonValue(Writer, Balance);
	if (TransactionHash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction_hash")); WriteJsonValue(Writer, TransactionHash.GetValue());
	}
	if (SignedTransaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signed_transaction")); WriteJsonValue(Writer, SignedTransaction.GetValue());
	}
	if (RawTransaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("raw_transaction")); WriteJsonValue(Writer, RawTransaction.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data);
	if (Transactions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transactions")); WriteJsonValue(Writer, Transactions.GetValue());
	}
	if (MoonScanUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("moon_scan_url")); WriteJsonValue(Writer, MoonScanUrl.GetValue());
	}
	if (Signature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature.GetValue());
	}
	if (Transaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction")); WriteJsonValue(Writer, Transaction.GetValue());
	}
	if (UserOps.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userOps")); WriteJsonValue(Writer, UserOps.GetValue());
	}
	if (UseropTransaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userop_transaction")); WriteJsonValue(Writer, UseropTransaction.GetValue());
	}
	if (Keys.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("keys")); WriteJsonValue(Writer, Keys.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Encoding.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("encoding")); WriteJsonValue(Writer, Encoding.GetValue());
	}
	if (Header.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("header")); WriteJsonValue(Writer, Header.GetValue());
	}
	if (Signtype.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signtype")); WriteJsonValue(Writer, Signtype.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("domain")); WriteJsonValue(Writer, Domain);
	Writer->WriteIdentifierPrefix(TEXT("current_atoken_balance")); WriteJsonValue(Writer, CurrentAtokenBalance);
	Writer->WriteIdentifierPrefix(TEXT("current_borrow_balance")); WriteJsonValue(Writer, CurrentBorrowBalance);
	Writer->WriteIdentifierPrefix(TEXT("principal_borrow_balance")); WriteJsonValue(Writer, PrincipalBorrowBalance);
	Writer->WriteIdentifierPrefix(TEXT("borrow_rate_mode")); WriteJsonValue(Writer, BorrowRateMode);
	Writer->WriteIdentifierPrefix(TEXT("borrow_rate")); WriteJsonValue(Writer, BorrowRate);
	Writer->WriteIdentifierPrefix(TEXT("liquidity_rate")); WriteJsonValue(Writer, LiquidityRate);
	Writer->WriteIdentifierPrefix(TEXT("origination_fee")); WriteJsonValue(Writer, OriginationFee);
	Writer->WriteIdentifierPrefix(TEXT("variable_borrow_index")); WriteJsonValue(Writer, VariableBorrowIndex);
	Writer->WriteIdentifierPrefix(TEXT("last_update_timestamp")); WriteJsonValue(Writer, LastUpdateTimestamp);
	Writer->WriteIdentifierPrefix(TEXT("usage_as_collateral_enabled")); WriteJsonValue(Writer, UsageAsCollateralEnabled);
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chain_id")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	if (Gas.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gas")); WriteJsonValue(Writer, Gas.GetValue());
	}
	if (GasPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gas_price")); WriteJsonValue(Writer, GasPrice.GetValue());
	}
	if (GasTipCap.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gas_tip_cap")); WriteJsonValue(Writer, GasTipCap.GetValue());
	}
	if (GasFeeCap.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gas_fee_cap")); WriteJsonValue(Writer, GasFeeCap.GetValue());
	}
	if (Value.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value.GetValue());
	}
	if (From.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("from")); WriteJsonValue(Writer, From.GetValue());
	}
	if (To.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("to")); WriteJsonValue(Writer, To.GetValue());
	}
	if (BlobGas.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blob_gas")); WriteJsonValue(Writer, BlobGas.GetValue());
	}
	if (BlobGasFeeCap.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blob_gas_fee_cap")); WriteJsonValue(Writer, BlobGasFeeCap.GetValue());
	}
	if (BlobHashes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blob_hashes")); WriteJsonValue(Writer, BlobHashes.GetValue());
	}
	if (V.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("v")); WriteJsonValue(Writer, V.GetValue());
	}
	if (R.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("r")); WriteJsonValue(Writer, R.GetValue());
	}
	if (S.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("s")); WriteJsonValue(Writer, S.GetValue());
	}
	if (Symbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("symbol")); WriteJsonValue(Writer, Symbol.GetValue());
	}
	if (Decimals.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("decimals")); WriteJsonValue(Writer, Decimals.GetValue());
	}
	if (TotalSupply.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("totalSupply")); WriteJsonValue(Writer, TotalSupply.GetValue());
	}
	if (ContractAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("contract_address")); WriteJsonValue(Writer, ContractAddress.GetValue());
	}
	if (BalanceOf.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("balanceOf")); WriteJsonValue(Writer, BalanceOf.GetValue());
	}
	if (Allowance.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("allowance")); WriteJsonValue(Writer, Allowance.GetValue());
	}
	if (BalanceOf.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("balance_of")); WriteJsonValue(Writer, BalanceOf.GetValue());
	}
	if (BalanceOfBatch.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("balance_of_batch")); WriteJsonValue(Writer, BalanceOfBatch.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("success")); WriteJsonValue(Writer, Success);
	Writer->WriteIdentifierPrefix(TEXT("message")); WriteJsonValue(Writer, Message);
	if (SignedTx.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signedTx")); WriteJsonValue(Writer, SignedTx.GetValue());
	}
	if (OwnerOf.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("owner_of")); WriteJsonValue(Writer, OwnerOf.GetValue());
	}
	if (TokenUri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("token_uri")); WriteJsonValue(Writer, TokenUri.GetValue());
	}
	if (IsApprovedForAll.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("isApprovedForAll")); WriteJsonValue(Writer, IsApprovedForAll.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAccountControllerResponseData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("nonce"), Nonce);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("balance"), Balance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction_hash"), TransactionHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signed_transaction"), SignedTransaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("raw_transaction"), RawTransaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transactions"), Transactions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("moon_scan_url"), MoonScanUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction"), Transaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userOps"), UserOps);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userop_transaction"), UseropTransaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("keys"), Keys);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("encoding"), Encoding);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("header"), Header);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signtype"), Signtype);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("domain"), Domain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("current_atoken_balance"), CurrentAtokenBalance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("current_borrow_balance"), CurrentBorrowBalance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("principal_borrow_balance"), PrincipalBorrowBalance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("borrow_rate_mode"), BorrowRateMode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("borrow_rate"), BorrowRate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("liquidity_rate"), LiquidityRate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("origination_fee"), OriginationFee);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variable_borrow_index"), VariableBorrowIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("last_update_timestamp"), LastUpdateTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("usage_as_collateral_enabled"), UsageAsCollateralEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain_id"), ChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gas"), Gas);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gas_price"), GasPrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gas_tip_cap"), GasTipCap);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gas_fee_cap"), GasFeeCap);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("from"), From);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("to"), To);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blob_gas"), BlobGas);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blob_gas_fee_cap"), BlobGasFeeCap);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blob_hashes"), BlobHashes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("v"), V);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("r"), R);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("s"), S);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("symbol"), Symbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("decimals"), Decimals);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("totalSupply"), TotalSupply);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_address"), ContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("balanceOf"), BalanceOf);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("allowance"), Allowance);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("balance_of"), BalanceOf);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("balance_of_batch"), BalanceOfBatch);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("success"), Success);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("message"), Message);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signedTx"), SignedTx);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("owner_of"), OwnerOf);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("token_uri"), TokenUri);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("isApprovedForAll"), IsApprovedForAll);

	return ParseSuccess;
}

}
